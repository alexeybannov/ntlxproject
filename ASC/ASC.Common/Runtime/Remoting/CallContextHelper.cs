using System;using System.IO;using System.Runtime.Remoting.Messaging;using System.Runtime.Serialization;using System.Runtime.Serialization.Formatters.Binary;using ASC.Runtime.Serialization;namespace ASC.Runtime.Remoting{                                            public sealed class CallContextHelper    {        private static readonly object _SyncRoot = new object();        private const string DescisionKey = "__asc__";        private const string LogicalCallContextKey = "__CallContext";        #region LogicalCallContext                                                public static void LogicalSetData(string key, object obj)        {            object data = _GetWrappedObject(obj);            CallContext.LogicalSetData(key, data);        }                                                        public static void LogicalSetData(string key, object obj, LogicalCallContext lCallContext)        {            if (lCallContext == null) return;            object data = _GetWrappedObject(obj);            lCallContext.SetData(key, data);        }                                                        public static void LogicalSetData(string key, object obj, IMessage message)        {            if (message == null                ||                message.Properties == null                ||                !message.Properties.Contains(LogicalCallContextKey)                )                return;            LogicalSetData(key, obj, (message.Properties[LogicalCallContextKey] as LogicalCallContext));        }                                                public static object LogicalGetData(string key)        {            object data = CallContext.LogicalGetData(key);            return _GetUnWrappedObject(data);        }                                                        public static object LogicalGetData(string key, LogicalCallContext lCallContext)        {            if (lCallContext == null) return null;            object data = lCallContext.GetData(key);            return _GetUnWrappedObject(data);        }                                                        public static object LogicalGetData(string key, IMessage message)        {            if (message == null                ||                message.Properties == null                ||                !message.Properties.Contains(LogicalCallContextKey)                )                return null;            return LogicalGetData(key, (message.Properties[LogicalCallContextKey] as LogicalCallContext));        }                                        public static void FreeNamedDataSlot(string key)        {            CallContext.FreeNamedDataSlot(key);        }                                                public static void FreeNamedDataSlot(string key, LogicalCallContext lCallContext)        {            if (lCallContext == null) return;            lCallContext.FreeNamedDataSlot(key);        }                                                public static void FreeNamedDataSlot(string key, IMessage message)        {            if (message == null                ||                message.Properties == null                ||                !message.Properties.Contains(LogicalCallContextKey)                )                return ;            FreeNamedDataSlot(key, (message.Properties[LogicalCallContextKey] as LogicalCallContext));        }        #endregion                static object _GetWrappedObject(object obj)        {            if (obj == null) return null;            return new object[]                       {                           DescisionKey,                           BinarySerializer.Instance.Serialize(obj)                       };        }        static object _GetUnWrappedObject(object data)        {            object[] objdata = data as object[];            if (                objdata == null                ||                objdata.Length != 2                ||                !(objdata[1] is byte[])                ||                String.Compare(DescisionKey, objdata[0] as string, true) != 0                )                return data;             byte[] bytes = objdata[1] as byte[];            object obj = null;            try            {                obj = BinarySerializer.Instance.Deserialize(bytes);            }            catch (SerializationException sexc)            {                ASC.Common.Utils.LogHolder.Log("ASC.Common").WarnFormat(                    "SerializationException exception occured while deserialize logical call context:{0}",                    sexc.Message                    );            }            return obj;        }    }}