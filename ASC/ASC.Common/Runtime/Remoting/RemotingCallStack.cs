using System;using System.Collections.Generic;using System.Reflection;using System.Runtime.Remoting.Messaging;using System.Text;using SmartAssembly.Attributes;namespace ASC.Runtime.Remoting {				[Serializable]	[Obfuscation(Exclude = true, ApplyToMembers = true)]	[DoNotObfuscateType]	public class RemotingCallStack {								const string RemotingCallStackKey = "ASC.Runtime.Remoting.RemotingCallStack.CALL_CONTEXT_KEY";								const string RemotingCallStackDisableKey = "ASC.Runtime.Remoting.RemotingCallStack.CALL_CONTEXT_DISABLE_KEY";		#region internal methods		private static int _DisCount {			get {				object o = CallContext.GetData(RemotingCallStackDisableKey);				if (o == null) return 0;				return Convert.ToInt32(o);			}		}		internal static void Disable() {			CallContext.SetData(RemotingCallStackDisableKey, _DisCount + 1);		}		internal static void Enable() {			CallContext.SetData(RemotingCallStackDisableKey, _DisCount - 1);		}		internal static bool IsEnabled() {			return _DisCount == 0;		}		internal static void Update(RemotingCallStack rCallStack, LogicalCallContext callContext) {			CallContextHelper.LogicalSetData(RemotingCallStackKey, rCallStack, callContext);		}		internal static RemotingCallStack Get(LogicalCallContext callContext) {			RemotingCallStack rcs = CallContextHelper.LogicalGetData(RemotingCallStackKey, callContext) as RemotingCallStack;			if (rcs == null) rcs = new RemotingCallStack();			return rcs;		}		internal static void Update(RemotingCallStack rCallStack) {			CallContextHelper.LogicalSetData(RemotingCallStack.RemotingCallStackKey, rCallStack);		}		internal static void Remove(LogicalCallContext callContext) {			CallContextHelper.FreeNamedDataSlot(RemotingCallStackKey, callContext);		}		internal void RemoveFirst() {			if (_Stack.Count > 0)				_Stack.RemoveAt(0);		}										internal void AppendFrame(RemotingCallStackFrame frame) {			if (frame == null) throw new ArgumentNullException("frame");			_Stack.Insert(0, frame);		}		#endregion		private readonly List<RemotingCallStackFrame> _Stack = new List<RemotingCallStackFrame>();								public int FramesCount {			get { return _Stack.Count; }		}								public RemotingCallStackFrame[] Frames {			get { return _Stack.ToArray(); }		}								public static RemotingCallStack Current {			get {				object obj = CallContextHelper.LogicalGetData(RemotingCallStackKey);				if (!(obj is RemotingCallStack)) return new RemotingCallStack();				return obj as RemotingCallStack;			}		}										public override string ToString() {			StringBuilder sb = new StringBuilder();			_Stack.ForEach(frm => sb.AppendFormat("{0}{1}", frm, Environment.NewLine));			return sb.ToString();		}	}}